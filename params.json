{
  "name": "Patchman",
  "tagline": "Patchman is a Linux Patch Status Monitoring System",
  "body": "# Patchman\r\n\r\n\r\n## Summary\r\n\r\nPatchman is a Django-based patch status monitoring tool for linux systems.\r\nPatchman provides a web interface for monitoring the package updates available\r\nfor linux hosts.\r\n\r\n\r\n## How does it work?\r\n\r\nPatchman clients send a list of installed packages and enabled repositories to\r\nthe Patchman server. The Patchman server updates its package list for each\r\nrepository and determines which hosts require updates, and whether those updates\r\nare normal or security updates. The web interface also gives information on\r\npotential issues, such as installed packages that are not from any repository.\r\n\r\nHosts, packages, repositories and operating systems can all be filtered. For\r\nexample, it is possible to find out which hosts have a certain version of a\r\npackage installed, and which repository it comes from.\r\n\r\nPatchman does not install update packages on hosts, it determines and displays\r\nwhat updates are available for each host.\r\n\r\n`yum` and `apt` plugins can send reports to the Patchman server every time\r\npackages are installed or removed on a host.\r\n\r\n\r\n## Source\r\n\r\nThe current source code is available on github:\r\n\r\n   https://github.com/furlongm/patchman\r\n\r\n\r\n## Dependencies\r\n\r\n### Server-side dependencies\r\n\r\n\r\n```\r\npython-django\r\npython-django-tagging\r\npython-django-extensions\r\npython-django-bootstrap3\r\npython-debian\r\npython-rpm\r\npython-progressbar\r\npython-lxml\r\npython-argparse\r\n```\r\n\r\nThe server can optionally make use of celery to asynchronously process the\r\nreports sent by hosts.\r\n\r\n\r\n### Client-side dependencies\r\n\r\nThe client-side dependencies are kept to a minimum. `rpm` and `dpkg` are\r\nrequired to report packages, `yum`, `zypper` and `apt` are required to report\r\nrepositories. These packages are normally installed by default on most systems.\r\n`dnf` is not yet supported.\r\n\r\nrpm-based OS's can tell if a reboot is required to install a new kernel by\r\nlooking at `uname -r` and comparing it to the highest installed kernel version.\r\n\r\ndeb-based OS's do not always change the kernel version when a kernel update is\r\ninstalled, so the `update-notifier-common` package needs to be installed to\r\nenable this functionality.\r\n\r\n\r\n## Usage\r\n\r\nThe web interface contains a dashboard with items that need attention, and\r\nvarious pages to manipulate hosts, repositories, packages, operating systems and\r\nreports.\r\n\r\nTo populate the database, simply run the client on some hosts:\r\n\r\n```shell\r\n$ patchman-client -s http://patchman.example.org\r\n```\r\n\r\nThis should provide some initial data to work with.\r\n\r\nOn the server, the `patchman` command line utility can be used to run certain\r\nmaintenance tasks, e.g. processing the reports sent from hosts, downloading\r\nrepository update information from the web. Run `patchman -h` for a rundown of\r\nthe usage:\r\n\r\n```shell\r\n$ sbin/patchman -h\r\nusage: patchman [-h] [-f] [-q] [-r] [-R REPO] [-lr] [-lh] [-u] [-A] [-H HOST]\r\n                [-p] [-c] [-d] [-n] [-a] [-D hostA hostB]\r\n\r\nPatchman CLI tool\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -f, --force           Ignore stored checksums and force-refresh all mirrors\r\n  -q, --quiet           Quiet mode (e.g. for cronjobs)\r\n  -r, --refresh-repos   Refresh repositories\r\n  -R REPO, --repo REPO  Only perform action on a specific repository (repo_id)\r\n  -lr, --list-repos     List all repositories\r\n  -lh, --list-hosts     List all hosts\r\n  -u, --host-updates    Find host updates\r\n  -A, --host-updates-alt\r\n                        Find host updates (alternative algorithm that may be\r\n                        faster when there are many homogeneous hosts)\r\n  -H HOST, --host HOST  Only perform action on a specific host (fqdn)\r\n  -p, --process-reports\r\n                        Process pending reports\r\n  -c, --clean-reports   Remove all but the last three reports\r\n  -d, --dbcheck         Perform some sanity checks and clean unused db entries\r\n  -n, --dns-checks      Perform reverse DNS checks if enabled for that host\r\n  -a, --all             Convenience flag for -r -A -p -c -d -n\r\n  -D hostA hostB, --diff hostA hostB\r\n                        Show differences between two hosts in diff-like output\r\n```\r\n\r\n\r\n## Concepts\r\n\r\nThe default settings will be fine for most people but depending on your setup,\r\nthere may be some initial work required to logically organise the data sent in\r\nthe host reports. The following explanations may help in this case.\r\n\r\nThere are a number of basic objects - Hosts, Repositories, Packages, Operating\r\nSystems and Reports. There are also Operating System Groups (which are optional)\r\nand Mirrors.\r\n\r\n### Host\r\nA Host is a single host, e.g. test01.example.org.\r\n\r\n### Operating System\r\nA Host runs an Operating System, e.g. CentOS 7.1, Debian 8.4, Ubuntu 16.04\r\n\r\n### Package\r\nA Package is a package that is either installed on a Host, or is available to\r\ndownload from a Repository mirror, e.g. `strace-4.8-11.el7.x86_64`,\r\n`grub2-tools-2.02-0.34.el7.centos.x86_64`, etc.\r\n\r\n### Mirror\r\nA Mirror is a collection of Packages available on the web, e.g. a `yum`, `yast`\r\nor `apt` repo.\r\n\r\n### Repository\r\nA Repository is a collection of Mirrors. Typically all the Mirrors will contain\r\nthe same Packages. For Red Hat-based Hosts, Repositories automatically link\r\ntheir Mirrors together. For Debian-based hosts, you may need to link all\r\nMirrors that form a Repository using the web interface. This may reduce the\r\ntime required to find updates.\r\n\r\n### Report\r\nA Host creates a Report using `patchman-client`. This Report is sent to the\r\nPatchman server. The Report contains the Host's Operating System, and lists\r\nof the installed Packages and enabled Repositories on a Host. The Patchman\r\nserver processes and records the list of Packages and Repositories contained in\r\nthe Report.\r\n\r\n### Operating System Group (optional)\r\nAn OSGroup is a collection of OS's. For example, an OSGroup named \"Debian 8\"\r\nwould be comprised of the following OS's:\r\n\r\n```\r\nDebian 8.0\r\nDebian 8.1\r\nDebian 8.4\r\n```\r\n\r\nLikewise, an OSGroup named \"CentOS 7\" could be made up of the following OS's:\r\n\r\n```\r\nCentOS 7.0\r\nCentOS 7.2.1511\r\n```\r\n\r\nRepositories can be associated with an OSGroup, or with the Host itself. If the\r\n`use_host_repos variable` is set to True for a Host, then updates are found by\r\nlooking only at the Repositories that belong to that Host. This is the default\r\nbehaviour and does not require OSGroups to be configured.\r\n\r\nIf `use_host_repos` is set to False, the update-finding process looks at the\r\nOSGroup that the Host's Operating System is in, and uses the OSGroup's\r\nRepositories to determine the applicable updates. This is useful in environments\r\nwhere many hosts are homogeneous (e.g. cloud/cluster environments).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}